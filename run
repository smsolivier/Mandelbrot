#!/bin/env python

import os
import sys 

import argparse

# parser = argparse.ArgumentParser(description='Process some integers.')
# parser.add_argument('integers', metavar='N', type=int, nargs='+',
#                     help='an integer for the accumulator')
# parser.add_argument('--sum', dest='accumulate', action='store_const',
#                     const=sum, default=max,
#                     help='sum the integers (default: find the max)')

parser = argparse.ArgumentParser(description='Calculate the Mandelbrot Set')
parser.add_argument('-omp', action='store_true', default=True, 
	help='Run with openMP')
parser.add_argument('-cuda', action='store_true', help='Run with CUDA')
parser.add_argument('-mpi', action='store_true', help='Run with MPI')
parser.add_argument('-p', '--print', action='store_true', 
	help='Print data to file')
parser.add_argument('deck', help='Name of deck to run')
parser.add_argument('size', help='Image height')
args = parser.parse_args()

printbool = 0
if (args.print == True):
	printbool = 1

deckname = args.deck
N = args.size

x = 0
if (args.omp == True):
	x = os.system('g++ -std=c++11 -lhdf5  -fopenmp Main/ompMand.cpp -O3 -o x')

elif (args.cuda == True):
	x = os.system('nvcc -std=c++11 -lhdf5 Main/GPUMand.cu -o x')

elif (args.mpi == True):
	x = os.system('mpic++ -std=c++11 -lhdf5 Main/MPIMand.cpp -o x')

if (x != 0):
	sys.exit()

x = os.system('./x Decks/%s %s %s' % (deckname, N, printbool))

if (x != 0):
	sys.exit()

os.system('eog map.ppm &')
